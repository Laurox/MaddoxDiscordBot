package de.laurox.dc.util;

import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Class made for processing all children of CommandParent
 * and Triggers them when the command matches
 */
public final class CommandProcessor extends ListenerAdapter {

    private List<CommandParent> commands;

    public CommandProcessor() {
        this.commands = new ArrayList<>();

        addCommand(new HelpCommand("help", 0));
    }


    @Override
    public void onMessageReceived(MessageReceivedEvent event) {
        if (event.getMessage().getAuthor().isBot())
            return;

        commands.forEach(commandParent -> {
            String regex = commandParent.getPrefix() + commandParent.getCommandName() + "([\\s]*[\\w]*)*";
            if (event.getMessage().getContentRaw().matches(regex)) {
                String[] args = event.getMessage().getContentRaw().split("\\s+");
                args = Arrays.copyOfRange(args, 1, args.length);

                // check if args amount matches
                if (args.length >= commandParent.getMinArgs() && commandParent.validateArgs(args, event)) {
                    commandParent.processCommand(event);
                    return;
                }

                commandParent.invalidMessage(event);
            }
        });

    }

    public boolean addCommand(CommandParent entry) {
        // remove auto help command
        if(entry.getCommandName().equals("help")) {
            commands.removeIf(i -> i.getCommandName().equals("help"));
        }
        return commands.add(entry);
    }

    /**
     * Inner Class to implement an autogenerated HelpCommand
     * Displaying Name + Description of each Command
     */
    class HelpCommand extends CommandParent {

        public HelpCommand(String commandName, int requiredArgs) {
            super(commandName, requiredArgs);
            super.setDescription("Shows you all registered Commands!");
        }

        @Override
        protected void processCommand(MessageReceivedEvent eventInstance) {
            StringBuilder outString = new StringBuilder("```");
            commands.forEach(commandParent -> {
                outString.append(commandParent.getCommandName()).append("\t\t");
                if (commandParent.hasDescription()) {
                    outString.append(commandParent.getDescription());
                } else {
                    outString.append("-//-");
                }
                outString.append("\n");
            });
            outString.append("```");

            eventInstance.getChannel().sendMessage(outString.toString()).queue();
        }

        @Override
        protected boolean validateArgs(String[] args, MessageReceivedEvent eventInstance) {
            return true;
        }
    }

}
